=begin
    Duskruin Arena Script
    Automatic Duskruin arena script that will fight for you. Just go into the entrance
    and the script will take over (as long as you were running it before going in).
	
    SYNTAX - ;tdusk <SLIP/TOKEN/BOOKLET/JAR/VOUCHER>
	
    See ;tdusk help
    For additional setup/help info.
    
    https://github.com/elanthia-online/scripts
	
       todo: unsure
     author: Tysong (horibu on PC), original Nylis
       name: tdusk
       tags: duskruin, arena, dusk ruin, tdusk
    version: 1.10.4

    changelog:
        1.10.1 (2019-08-11)
            Updated a custom routine
	1.10 (2019-08-11)
            Added detection of empty packages and continue.
	    Added new setting for opening your lootsack prior to emptying package
	    Updated a few custom routines and cleaned up some unused code.
        1.9.4 (2019-08-05)
            Added another sorc routine that doesn't use CoL

    credit & thanks:
        Nylis for his initial script released back in 2015.
=end
=begin
        1.9.3 (2019-03-02)
            Added an additional wizard custom routine (earth spec)
        1.9.2 (2019-02-17)
            Added an additional custom routine for someone
        1.9.1 (2019-02-17)
            Changed a custom routine for someone
        1.9 (2019-02-17)
            Added option to not loot the package and just put the package in your lootsack
        1.8 (2019-02-17)
            Fixed non-rummage scrip option to go before empty package section
            Updated package empty stuff to better pause when loot container full
        1.7 (2019-02-16)
            Changed weapon/shield preparation/storage to use STORE ALL/GIRD and removed detection
            to try to autodetect types. So be sure READLY and STORE are properly setup.
        1.6 (2019-02-16)
            Additional new wave detection to prevent getting stuck due to faster corpse removal
        1.5 (2019-02-16)
            Added additional custom routines
            Changed default scrip pouch to bloodscrip
            Added a few custom weapon nouns to be detected better
        1.4 (2018-12-23)
            Custom routine updates
        1.3 (2018-12-15)
            Changed fput to put for bard stopping 1018 and inv enh off/on
        1.2 (2018-12-15)
            Added automatic dismissing of NPCs if dead
        1.1 (2018-06-26)
            Added new UserVars.tdusk[:broadcast] setting to enable/disable lnet broadcast
        1.0 (2017-08-23)
            Redo of duskruin_arena to use UserVars for settings so not lost between updates
=end

if LNet.respond_to?(:safe_send)
	lnet_or_0net = "0net"
else
	lnet_or_0net = "lnet"
end

UserVars.tdusk 					  ||= {}
UserVars.tdusk[:activescripts]		= ['stand','duskruin_watch']	if UserVars.tdusk[:activescripts].nil?
UserVars.tdusk[:scrippouch]			= 'bloodscrip pouch'			if UserVars.tdusk[:scrippouch].nil?
UserVars.tdusk[:waggle_me]			= true							if UserVars.tdusk[:waggle_me].nil?
UserVars.tdusk[:pause_me]			= true							if UserVars.tdusk[:pause_me].nil?
UserVars.tdusk[:enhancive_me]		= false							if UserVars.tdusk[:enhancive_me].nil?
UserVars.tdusk[:scriprummage]		= true							if UserVars.tdusk[:scriprummage].nil?
UserVars.tdusk[:high_ds]			= false							if UserVars.tdusk[:high_ds].nil?
UserVars.tdusk[:attack_script]		= false							if UserVars.tdusk[:attack_script].nil?
UserVars.tdusk[:broadcast]			= true							if UserVars.tdusk[:broadcast].nil?
UserVars.tdusk[:lootpackage]		= true							if UserVars.tdusk[:lootpackage].nil?
UserVars.tdusk[:open_lootsack]		= false							if UserVars.tdusk[:open_lootsack].nil?


#activescripts = Array['manaleech','stand','symbolz','transcend','duskruin_watch','high_ds']
#scrippouch    = "leather pouch"
#waggle_me     = true  # true to do ;waggle between runs
#pause_me      = true  # true to pause between runs
#enhancive_me  = false # true to use INVENTORY ENHANCIVE ON/OFF to toggle enhancives inside arena
#scriprummage  = 1

if !Script.exists?("duskruin_watch")
	echo "You need to ;repo download duskruin_watch"
	echo "For this script to work."
	exit
elsif !UserVars.tdusk[:activescripts].include? "duskruin_watch"
	echo "You took out duskruin_watch from activescripts"
	echo "You should not do this, I put it back for you"
	UserVars.tdusk[:activescripts].push("duskruin_watch")
elsif UserVars.tdusk[:attack_script] == true && !Script.exists?("#{Char.name}-duskattack")
	echo "You have a custom attack script turned on."
	echo "But you attack_script turned on."
	echo "Please create a #{Char.name}-duskattack.lic script with your routine."
	echo "Or set ;e UserVars.tdusk[:attack_script] = false"
	exit
end

start_time    = 0
total_time    = 0
kill_time     = 0
avg_reg       = 0
avg_champ     = 0
group_size    = 0
UserVars.tdusk[:wave_number] = 0
UserVars.tdusk[:high_ds] == false

if $frontend =~ /stormfront|profanity/i
	fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
	fam_window_end   = "<popStream/>\r\n"
else
	fam_window_begin = "\034GSe\r\n"
	fam_window_end   = "\034GSf\r\n"
end

def attack(number)
	GameObj.npcs.each { |npc| 
		if !(npc.status =~ /dead|gone/) && UserVars.tdusk[:attack_script] == true
			start_script("#{Char.name}-duskattack")
			wait_while {running?("#{Char.name}-duskattack")}

		#Wizard Routine for Treeva & Tysong
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Treeva|Tysong|Sabotage|Cabal|Melenie/
			fput "symbol of sleep" if Society.status == "Order of Voln"
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "pray" if !(Spell[917].affordable?) and !(npc.status =~ /dead|gone/)
			fput "incant 917 fire" if (Spell[917].affordable?) and npc.name !~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			fput "incant 917 cold" if (Spell[917].affordable?) and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			if (checkmana >= 100 and UserVars.tdusk[:wave_number] == 25)
				pause 0.1 
				waitrt? if !(npc.status =~ /dead|gone/)
				waitcastrt? if !(npc.status =~ /dead|gone/)
				Spell[950].cast('910 910 910 910 910 910') if (checkmana >= 100 and UserVars.tdusk[:wave_number] == 25)
			end
			while !(npc.status =~ /dead|gone/) && !dead?
				fput "pray" if checkmana < 6
				if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active? and checkrt == 0 and checkcastrt == 0
					fput "incant 515"
				end
				if Spell[903].affordable? and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
					put "stance offensive"
					fput "incant 903 cast"
					fput "stance defensive" 
				end
				if Spell[903].affordable? and !(npc.name =~ /crimson|fire|troll/) and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
					put "stance offensive"
					fput "incant 903 evoke"
					fput "stance defensive" 
				end
				if Spell[906].affordable? and !(npc.name =~ /crimson|fire/) and npc.name =~ /troll/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
					put "stance offensive"
					fput "incant 906"
					fput "stance defensive" 
				end
				pause 0.1
			end
			Script.start("foreach", "in room; look item") if UserVars.tdusk[:wave_number] != 25
			Script.start("foreach", "in room; get item; stow item") if UserVars.tdusk[:wave_number] == 25

		#Sorcerer Routine for Rasko
		elsif !(npc.status =~ /dead|gone/) && Char.name =~ /Rasko|Roiken/
			if npc.name !~ /automaton/ && !(npc.status =~ /dead|gone/) && GameObj.npcs
				waitrt?
				waitcastrt?
				Spell[9918].cast if (!(Spell[717].affordable?) && checkspirit >= 6 )
				fput "pray" if (!(Spell[717].affordable?) && checkspirit < 6 )
				waitrt?
				waitcastrt?
				fput "incant 717" if (Spell[717].affordable?)
			end
			pause 0.1
			while (!(npc.status =~ /dead|gone/) && GameObj.npcs) do
				fput "sign of wracking" if (checkmana < 20 && checkspirit >= 6 )
				fput "pray" if (checkmana < 20 && checkspirit < 6 )
				multifput "incant 711" if Spell[711].affordable? && !(npc.status =~ /dead|gone/) && checkrt == 0 && checkcastrt == 0
				pause 0.1
			end
			Script.start("foreach", "in room; look item") if UserVars.tdusk[:wave_number] != 25
			Script.start("foreach", "in room; get item; stow item") if UserVars.tdusk[:wave_number] == 25

		#Sorcerer Routine for Dyreknor
		elsif !(npc.status =~ /dead|gone/) && Char.name =~ /Dyreknor/
			if npc.name !~ /automaton/ && !(npc.status =~ /dead|gone/) && GameObj.npcs
				waitrt?
				waitcastrt?
				fput "pray" if (!(Spell[717].affordable?))
				waitrt?
				waitcastrt?
				fput "incant 717" if (Spell[717].affordable?)
			end
			pause 0.1
			while (!(npc.status =~ /dead|gone/) && GameObj.npcs) do
				fput "pray" if (checkmana < 20)
				multifput "incant 711" if Spell[711].affordable? && !(npc.status =~ /dead|gone/) && checkrt == 0 && checkcastrt == 0
				pause 0.1
			end

		#Wizard Routine for Aranthius
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Aranthius/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 516" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number])
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			if checkmana >= 60 and !(npc.status =~ /dead|gone/) and ((Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) || npc.name =~ /monkey/)
				put "stance offensive"
				fput "incant 950 510 510 510 510 510 510"
				fput "stance defensive" 
			end
			while !(npc.status =~ /dead|gone/) && !dead?
				fput "pray" if checkmana < 6
				if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active? and checkrt == 0 and checkcastrt == 0
					fput "incant 515"
				end
				if Spell[904].affordable? and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
					put "stance offensive"
					fput "incant 904"
					fput "stance defensive" 
				end
				sleep 0.1
			end
		
		#Wizard Routine for Arkios
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Arkios/
			fput "tap" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && (Spell[909].active?) && !(npc.status =~ /dead|gone/)
			fput "incant 410" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && !(Spell[909].active?) && (Spell[410].affordable?) && !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "pray" if !(Spell[917].affordable?) and !(npc.status =~ /dead|gone/)
			fput "incant 917 cold" if (Spell[917].affordable?) and npc.name !~ /arctic|ice|snow|witch/ and !(npc.status =~ /dead|gone/)
			fput "incant 917 fire" if (Spell[917].affordable?) and npc.name =~ /arctic|ice|snow|witch/ and !(npc.status =~ /dead|gone/)
			if (checkmana >= 100 and UserVars.tdusk[:wave_number] == 25)
				sleep 0.1 
				waitrt? if !(npc.status =~ /dead|gone/)
				waitcastrt? if !(npc.status =~ /dead|gone/)
				put "stance offensive"
				fput "incant 950 910 910 910 910 910 910" if (checkmana >= 100 and UserVars.tdusk[:wave_number] == 25) && !(npc.status =~ /dead|gone/)
				put "stance defensive"
			end
			while !(npc.status =~ /dead|gone/) && !dead?
				fput "pray" if checkmana < 6
				if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active? and checkrt == 0 and checkcastrt == 0
					put "incant 515" if !(npc.status =~ /dead|gone/)
				end
				if Spell[903].affordable? and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
					put "stance offensive"
					fput "incant 903" if !(npc.status =~ /dead|gone/)
					put "stance defensive" 
				end
				if Spell[904].affordable? and !(npc.name =~ /crimson|fire|troll/) and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
					put "stance offensive"
					fput "incant 904" if !(npc.status =~ /dead|gone/)
					put "stance defensive" 
				end
				if Spell[906].affordable? and !(npc.name =~ /crimson|fire/) and npc.name =~ /troll/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
					put "stance offensive"
					fput "incant 906" if !(npc.status =~ /dead|gone/)
					put "stance defensive" 
				end
				sleep 0.1
			end
			Script.start("foreach", "in room; get item; stow item") if UserVars.tdusk[:wave_number] == 25			

		#Ranger Bow Routine for Nuadjha with everlasting quiver
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Nuadjha/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			Spell[140].cast if (Spell[140].affordable?) && !(Spell[140].active?) && (Array[4,9,14,19,24].include? UserVars.tdusk[:wave_number])
			waitcastrt? if !(npc.status =~ /dead|gone/)
			multifput "stance offensive", "incant 615" if (Spell[615].affordable?) and npc.name =~ /champion|slave|gnoll|hunter|gronk|monkey/ && !(npc.status =~ /dead|gone/)
			fput "incant 607" if (Spell[607].affordable?) and npc.name =~ /champion|slave|slaver|hunter|gronk|monkey/ && !(npc.status =~ /dead|gone/)
			target_location = "right"
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			while !(npc.status =~ /dead|gone/) && !dead?
				if checkrt == 0
					put "aim #{target_location} eye" if !(npc.status =~ /dead|gone/)
					fput "rub my quiver" if GameObj.right_hand.noun != "arrow" and !(npc.status =~ /dead|gone/)
					put "stance offensive" if stance != "offensive"
					fput "fire" if GameObj.right_hand.noun == "arrow" and !(npc.status =~ /dead|gone/)
				end
				pause 0.1
				target_location = "right" if target_location == "left"
				target_location = "left" if target_location == "right"
			end			
			put "drop arrow" if UserVars.tdusk[:wave_number] == 25 
			Script.start("foreach", "in room; get item; stow item") if UserVars.tdusk[:wave_number] == 25		

		#Wizard Routine for Kinjaro			
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Kinjaro/
			waitrt? if !(npc.status =~ /dead|gone/)
			fput "tap" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && Spell[909].active?
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 917 fire" if (Spell[917].affordable?) and npc.name !~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			fput "incant 917 cold" if (Spell[917].affordable?) and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			pause 0.5 if (checkmana > 170 and UserVars.tdusk[:wave_number] == 25)
			Spell[950].cast('910 910 910 910 910 910') if (checkmana > 170 and UserVars.tdusk[:wave_number] == 25)
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active?
			while !(npc.status =~ /dead|gone/) && !dead?
				fput "incant 515" if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active? and checkrt == 0 and checkcastrt == 0
				multifput "stance offensive", "incant 903 cast", "stance defensive" if Spell[903].affordable? and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
				multifput "stance offensive", "incant 903 evoke", "stance defensive" if Spell[903].affordable? and !(npc.name =~ /crimson|fire|troll/) and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
				multifput "stance offensive", "incant 906", "stance defensive" if Spell[906].affordable? and !(npc.name =~ /crimson|fire/) and npc.name =~ /troll/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
				pause 0.25
			end
			if Spell[515].timeleft < 0.25
				waitcastrt?
				fput "incant 515" if Spell[515].affordable?
			end
			
		#Wizard Routine for Miaya 
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Miaya/
			waitrt? if !(npc.status =~ /dead|gone/)
			fput "stomp" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && Spell[909].active?
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 917 fire" if (Spell[917].affordable?) and npc.name !~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			fput "incant 917 cold" if (Spell[917].affordable?) and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			pause 0.5 if (checkmana > 120 and UserVars.tdusk[:wave_number] == 25)
			Spell[950].cast('910 910 910 910 910 910') if (checkmana > 120 and UserVars.tdusk[:wave_number] == 25)
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active?
			while !(npc.status =~ /dead|gone/) && !dead?
				multifput "stance offensive", "incant 904 cast", "stance defensive" if Spell[903].affordable? and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
				pause 0.25
			end
		
		#Wizard Routine for Titaniae
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Titaniae/
			waitrt? if !(npc.status =~ /dead|gone/)
			fput "tap" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && Spell[909].active?
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "pray" if !(Spell[917].affordable?) and !(npc.status =~ /dead|gone/)
			fput "incant 917 fire" if (Spell[917].affordable?) and npc.name !~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			fput "incant 917 cold" if (Spell[917].affordable?) and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			while !(npc.status =~ /dead|gone/) && !dead?
				Spell[9718].cast if Spell[9718].affordable? && checkstamina(90) && !(npc.status =~ /dead|gone/)
				fput "pray" if checkmana < 6
				if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active? and checkrt == 0 and checkcastrt == 0
					put "incant 515"
				end
				if Spell[903].affordable? and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
					put "stance offensive"
					fput "incant 904"
					put "stance defensive" 
				end
				if Spell[903].affordable? and !(npc.name =~ /crimson|fire|troll/) and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
					put "stance offensive"
					fput "incant 903"
					put "stance defensive" 
				end
				pause 0.1
			end

		#Wizard Routine for Whirlin
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Whirlin/
			if GameObj.right_hand.noun == nil && GameObj.loot.find { |item| item.name =~ /arrow/ }
				multifput "gather dark arrow", "put my Arrow in arrows in my spidersilk quiver"
				fput "drop arrow" if GameObj.right_hand != nil
			end
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 919" if (Spell[919].affordable?) && (Array[4,9,14,19,24].include? UserVars.tdusk[:wave_number])
			fput "stomp" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && Spell[909].active?
			fput "incant 917 fire" if (Spell[917].affordable?) and npc.name !~ /crimson|fire/ and !(npc.status =~ /dead|gone/) && (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number])
			fput "incant 917 cold" if (Spell[917].affordable?) and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) && (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number])
			while !(npc.status =~ /dead|gone/) && !dead?
				if Spell[506].timeleft <= 0.10 && Spell[506].affordable? && !Spell[598].active?
					return if checkrt > 0 && checkcastrt > 0
					Spell[506].cast  && UserVars.tdusk[:high_ds] == false
				elsif checkrt == 0
					fput "take 1 arrow from my spidersilk quiver" if GameObj.right_hand.noun != "arrow" and !(npc.status =~ /dead|gone/)
					fput "stance offensive" if stance != "offensive"
					fput "fire" if GameObj.right_hand.noun == "arrow" and !(npc.status =~ /dead|gone/) && UserVars.tdusk[:high_ds] == false
				end
				pause 0.25
			end

		#Rogue Bow Routine for Landrag
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Landrag/
			if GameObj.right_hand.noun == nil && GameObj.loot.find { |item| item.name =~ /arrow/ }
				multifput "gather arrow", "put my Arrow in arrows in my black quiver"
				fput "drop arrow" if GameObj.right_hand != nil
			end
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "symbol of sleep"
			while !(npc.status =~ /dead|gone/) && !dead?
				if checkrt == 0
					fput "take 1 arrow from my black quiver" if GameObj.right_hand.noun != "arrow" and !(npc.status =~ /dead|gone/)
					fput "stance offensive" if stance != "offensive"
					fput "fire" if GameObj.right_hand.noun == "arrow" and !(npc.status =~ /dead|gone/) && UserVars.tdusk[:high_ds] == false
				end
				pause 0.1
			end
			if UserVars.tdusk[:wave_number] == 25 && GameObj.right_hand.noun == nil && GameObj.loot.find { |item| item.name =~ /arrow/ }
				put "gather arrow"
				put "put my Arrow in arrows in my black quiver"
			end
			put "stow right hand" if UserVars.tdusk[:wave_number] == 25 
				
			
		#Wizard Routine for Alasatia & Altheren
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Alasatia|Altheren/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "tap" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && Spell[909].active?
			while !(npc.status =~ /dead|gone/)
				if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active? and checkrt == 0 and checkcastrt == 0
					put "incant 515" 
				end
				if Spell[907].affordable? and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
					put "stance offensive"
					fput "incant 907"
					put "stance defensive" 
				end
				if Spell[903].affordable? and !(npc.name =~ /crimson|fire/) and !(npc.status =~ /dead|gone/) and !(Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) and checkrt == 0 and checkcastrt == 0
					put "stance offensive"
					fput "incant 903"
					put "stance defensive" 
				end
				if Spell[906].affordable? and !(npc.name =~ /crimson|fire/) and !(npc.status =~ /dead|gone/) and Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number] and checkrt == 0 and checkcastrt == 0
					put "stance offensive"
					fput "incant 906"
					put "stance defensive"
				end
				pause 0.1
			end
		
		#Wizard Routine for Ragz
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Ragz/
            waitrt? if !(npc.status =~ /dead|gone/)
            waitcastrt? if !(npc.status =~ /dead|gone/)
            fput "tap" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && Spell[909].active?
			Spell[917].cast if (Spell[917].affordable? and (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]))
            Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active?
            while !(npc.status =~ /dead|gone/)
                multifput "stance offensive", "incant 903", "stance defensive" if Spell[903].affordable? and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
                multifput "stance offensive", "incant 904", "stance defensive" if Spell[904].affordable? and !(npc.name =~ /crimson|fire/) and !(npc.status =~ /dead|gone/) and !(Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) and checkrt == 0 and checkcastrt == 0
                multifput "stance offensive", "incant 906", "stance defensive" if Spell[906].affordable? and !(npc.name =~ /crimson|fire/) and !(npc.status =~ /dead|gone/) and Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number] and checkrt == 0 and checkcastrt == 0
                pause 0.25
            end
			
		#Wizard Rotuine for Claudaro
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Claudaro/
            waitrt? if !(npc.status =~ /dead|gone/)
            waitcastrt? if !(npc.status =~ /dead|gone/)
            Spell[917].cast if (Spell[917].affordable? and UserVars.tdusk[:wave_number] != 25)
            Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active?
            while !(npc.status =~ /dead|gone/)
                multifput "stance offensive", "incant 910", "stance defensive" if Spell[904].affordable? and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
                multifput "stance offensive", "incant 906", "stance defensive" if Spell[903].affordable? and !(npc.name =~ /crimson|fire/) and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
                pause 0.25
            end
			
		#Sorcerer Routine for Xred
		elsif !(npc.status =~ /dead|gone/) && Char.name =~ /Xred/
			if npc.name !~ /automaton/ and !(npc.status =~ /dead|gone/) and GameObj.npcs
				waitrt?
				waitcastrt?
				Spell[9918].cast if (!(Spell[717].affordable?) and checkspirit >= 6 )
				waitrt?
				waitcastrt?
				Spell[717].cast if (Spell[717].affordable?)
			end
			while (!(npc.status =~ /dead|gone/) and GameObj.npcs) do
				waitrt?
				waitcastrt?
				Spell[9918].cast if (!(Spell[711].affordable?) and checkspirit >= 6 )
				waitrt?
				waitcastrt?
				Spell[711].cast if (Spell[711].affordable?)
			end
		
		#Sorcerer Routine for Maetriks
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Maetriks/
			pause 1.25
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
            multifput "prep 417", "cast void" if GameObj.loot.find { |item| item.name.include? "void" } && npc.name =~ /automaton/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)			
			fput "incant 717" if (Spell[717].affordable?) && npc.status !~ /dead|gone/ && npc.name !~ /automaton/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 717" if (Spell[717].affordable?) && npc.status !~ /dead|gone|lying down|stunned|prone|sleeping|kneeling/ && npc.name !~ /automaton/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
            fput "incant 720" if (Spell[720].affordable?) && npc.status !~ /dead|gone/ && npc.name !~ /automaton/ && !GameObj.loot.find { |item| item.name.include? "void" } 
            while !(npc.status =~ /dead|gone/) && !dead?
                fput "incant 711" if (Spell[711].affordable?) && npc.status !~ /dead|gone/ && npc.name =~ /crab|grahnk|yeti|champion|automaton/ && checkrt == 0 && checkcastrt == 0
                fput "incant 705" if (Spell[705].affordable?) && npc.status !~ /dead|gone/ && npc.name !~ /crab|grahnk|yeti|champion|automaton/ && checkrt == 0 && checkcastrt == 0
                pause 0.25 if !(npc.status =~ /dead|gone/)
            end
		
		#Bard Routine for Luxelle
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Luxelle/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 1002" if Spell[1002].affordable? and npc.noun =~ /champion|marauder|slaver|shaman|troll|witch|servant|seeker|grahnk|ranger|wildling/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "symbol of mana" if checkmana <= 40
			fput "incant 1030" if Spell[1030].affordable?
			while !(npc.status =~ /dead|gone/) && !dead?
				fput "symbol of mana" if checkmana <= 40 and checkrt == 0 and checkcastrt == 0
				fput "incant 1030" if Spell[1030].affordable? and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
				pause 0.5
			end
			put "curtsy grand" if npc.status =~ /dead/ and UserVars.tdusk[:wave_number] == 25 && !dead?
			put "stop 1018" if UserVars.tdusk[:wave_number] == 25 && !dead?
			waitcastrt? if UserVars.tdusk[:wave_number] == 25 && !dead?
			put "renew all" if UserVars.tdusk[:wave_number] == 25 && !dead?
			
		#Bard Routine for Naamit
        elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Naamit/
            waitrt? if !(npc.status =~ /dead|gone/)
            waitcastrt? if !(npc.status =~ /dead|gone/)
            fput "sign wracking" if checkmana <= 30 && checkspirit >= 6
            fput "incant 1030" if Spell[1030].affordable?
            while !(npc.status =~ /dead|gone/) && !dead?
                if checkmana <= 30  && checkspirit >= 6 && checkrt == 0 && checkcastrt == 0
					fput "sign wracking" 
				end
                if Spell[1030].affordable? and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
					fput "incant 1030"
				end
                sleep 0.1
            end

		#Warrior Routine for Durakar
		elsif !(npc.status =~ /dead|gone/) && Char.name =~ /Durakar/
            while npc.name =~ /automaton|champion/ and !(npc.status =~ /dead|gone/)
                fput "berserk" if !(Spell[9607].active?) and checkstamina >= 20 and checkrt == 0 and checkcastrt == 0
				multifput "aim chest", "ambush" if !(Spell[9607].active?) and checkstamina < 20  and checkrt == 0 and checkcastrt == 0
				pause 0.25
			end
            while (npc.name =~ /yeti|mammoth/ and !(npc.status =~ /lying down|stunned/) and !(npc.status =~ /dead|gone/)) do
                multifput "aim left leg", "ambush" if checkrt == 0 and checkcastrt == 0 and !(Spell[9607].active?)
				pause 0.25
            end
            while (npc.name =~ /yeti|mammoth/ and (npc.status =~ /lying down|stunned/) and !(npc.status =~ /dead|gone/)) do
                multifput "aim head", "ambush" if checkrt == 0 and checkcastrt == 0 and !(Spell[9607].active?)
				pause 0.25
            end
		
		#Attack Routine for Hoy w/ SK 506
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Hoy/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 616" if (Spell[616].affordable?) && (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number])
			while !(npc.status =~ /dead|gone/) && !dead?
				if Spell[506].timeleft <= 0.04 && Spell[506].affordable? && !Spell[598].active?
					return if checkrt > 0 && checkcastrt > 0
					Spell[506].cast  && UserVars.tdusk[:high_ds] == false
				elsif (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && checkrt == 0 && !Spell[9005].active?
					fput "stance offensive" if stance != "offensive"
					fput "mstrike ##{npc.id}" if UserVars.tdusk[:high_ds] == false
				elsif checkrt == 0
					fput "stance offensive" if stance != "offensive"
					fput "attack" if UserVars.tdusk[:high_ds] == false
				end
				pause 0.1
			end

		#Paladin Routine for Nairdin
		elsif Char.name =~ /Nairdin/
            waitrt?
            waitcastrt?
            fput "beseech sledge" if npc.name =~ /champion|automaton/
            fput "symbol of sleep" if npc.name =~ /champion|yeti|mammoth|grahnk/
            while npc.status !~ /dead|gone/ && !dead?
                if npc.name =~ /automaton/ && checkrt == 0 && npc.status !~ /dead|gone/
                    pause 0.6
                    put "qstr 5" if !Spell[9005].active? && npc.status !~ /dead|gone/
                    put "mstr target" if !Spell[9005].active? && npc.status !~ /dead|gone/
                    put "qstr 3" if Spell[9005].active? && npc.status !~ /dead|gone/
                    put "aim left leg" if Spell[9005].active? && npc.status !~ /dead|gone/
                    put "ambush" if Spell[9005].active? && npc.status !~ /dead|gone/
                    put "aim chest" if Spell[9005].active? && npc.status !~ /dead|gone/
                    put "ambush" if Spell[9005].active? && npc.status !~ /dead|gone/
                elsif npc.name =~ /champion/ && checkrt == 0 && npc.status !~ /dead|gone/
                    pause 0.6
                    put "qstr 5 mstr target" if npc.status !~ /dead|gone/
                    put "qstr 3" if npc.status !~ /dead|gone/
                    put "aim chest" if npc.status !~ /dead|gone/
                    put "ambush" if npc.status !~ /dead|gone/
                    put "sym sleep" if npc.status !~ /dead|gone/
                    put "ambush" if npc.status !~ /dead|gone/
                elsif checkrt == 0 && npc.status !~ /dead|gone/
                    pause 0.6
                    put "aim neck" if npc.status !~ /dead|gone/
                    put "ambush" if npc.status !~ /dead|gone/
                    put "sym sleep" if npc.status !~ /dead|gone/
                    put "aim head" if npc.status !~ /dead|gone/
                    put "ambush" if npc.status !~ /dead|gone/
                end
                pause 0.25 if npc.status !~ /dead|gone/
            end
			
		#Empath Routine for Siierra
		elsif npc.status !~ /dead|gone/ and Char.name =~ /Siierra|Maylan|Larenusia/
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			fput "pray" if !(Spell[240].affordable?) && npc.status !~ /dead|gone/
			fput "incant 240" if Spell[240].affordable? && !Spell[240].active? && npc.status !~ /dead|gone/
			while npc.status !~ /dead|gone/ && !dead?
				if checkrt == 0 && checkcastrt == 0 && npc.status !~ /dead|gone/
					if !Spell[240].active?
						fput "pray" if !Spell[240].affordable? && npc.status !~ /dead|gone/
						fput "incant 240" if Spell[240].affordable? && npc.status !~ /dead|gone/
					elsif npc.name =~ /automaton/
						fput "pray" if !Spell[1106].affordable? && npc.status !~ /dead|gone/
						fput "incant 1106" if npc.status !~ /dead|gone/
					elsif npc.status !~ /dead|gone/
						fput "pray" if !Spell[1115].affordable? && npc.status !~ /dead|gone/
						fput "incant 1115" if Spell[1115].affordable? && npc.status !~ /dead|gone/
					end
				end
				pause 0.1 if npc.status !~ /dead|gone/
			end
			
		#Empath Routine for Orpius
		elsif npc.status !~ /dead|gone/ and Char.name =~ /Orpius/
			fput "symbol of sleep"
			pause 0.2
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			fput "pray" if !(Spell[240].affordable?) && !Spell[240].active? && npc.status !~ /dead|gone/
			Spell[240].cast if Spell[240].affordable? && !Spell[240].active? && npc.status !~ /dead|gone/
			while npc.status !~ /dead|gone/ && !dead?
				if npc.name =~ /kiramon|beetle|crab|worm/ && npc.status !~ /dead|gone/ && checkrt == 0 && checkcastrt == 0
					fput "pray" if !(Spell[1115].affordable?) && npc.status !~ /dead|gone/ && checkrt == 0 && checkcastrt == 0
					fput "incant 1115" if Spell[1115].affordable? && npc.status !~ /dead|gone/ && checkrt == 0 && checkcastrt == 0
				elsif npc.status !~ /dead|gone/ && checkrt == 0 && checkcastrt == 0
					fput "pray" if !(Spell[1106].affordable?) && npc.status !~ /dead|gone/ && checkrt == 0 && checkcastrt == 0
					fput "incant 1106" if Spell[1106].affordable? && npc.status !~ /dead|gone/ && checkrt == 0 && checkcastrt == 0
				end
				pause 0.1 if npc.status !~ /dead|gone/
			end
			
		#Cleric Routine for Kinsley
		elsif npc.status !~ /dead|gone/ and Char.name =~ /Kinsley/
			pause 0.5
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			fput "pray" if !(Spell[240].affordable?) && !Spell[240].active? && npc.status !~ /dead|gone/ && checkrt == 0 && checkcastrt == 0
			Spell[240].cast if Spell[240].affordable? && !Spell[240].active?
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			while npc.status !~ /dead|gone/ && !dead?
				if checkrt == 0 && checkcastrt == 0 && npc.status !~ /dead|gone/
					if !Spell[240].affordable? && !Spell[240].active?
						Spell[9918].cast if checkspirit >= 6
						fput "pray" if checkspirit < 6
					elsif Spell[240].affordable? && !Spell[240].active?
						Spell[240].cast
					elsif !Spell[302].affordable? && npc.name !~ /champion|automaton/
						Spell[9918].cast if checkspirit >= 6
						fput "pray" if checkspirit < 6
					elsif Spell[302].affordable? && npc.name !~ /champion|automaton/
						Spell[302].cast
					elsif !Spell[317].affordable? && npc.name =~ /champion|automaton/
						Spell[9918].cast if checkspirit >= 6
						fput "pray" if checkspirit < 6
					elsif Spell[317].affordable? && npc.name =~ /champion|automaton/
						Spell[317].cast

					end
				end
				pause 0.25 if npc.status !~ /dead|gone/
			end
		
		#Cleric Routine for Katiesa
		elsif npc.status !~ /dead|gone/ and Char.name =~ /Katiesa/
			pause 0.5
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			fput "pray" if !(Spell[240].affordable?) && !Spell[240].active?
			Spell[240].cast if Spell[240].affordable? && !Spell[240].active?
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			while npc.status !~ /dead|gone/ && !dead?
				if checkrt == 0 && checkcastrt == 0 && npc.status !~ /dead|gone/
					if Spell[240].affordable? && !Spell[240].active?
						Spell[240].cast
					elsif !Spell[240].affordable? && !Spell[240].active?
						fput "pray"
						Spell[240].cast	
					elsif (Array[5,10,15,16,17,18,19,20,21,22,23,24,25].include? UserVars.tdusk[:wave_number]) && npc.name !~ /fire|crimson/ && Spell[317].affordable?
						Spell[317].cast
					elsif (Array[5,10,15,16,17,18,19,20,21,22,23,24,25].include? UserVars.tdusk[:wave_number]) && npc.name !~ /fire|crimson/ && !Spell[317].affordable?
						fput "pray"
						Spell[317].cast
					elsif Spell[312].affordable?
						Spell[312].cast
					elsif !Spell[312].affordable?
						fput "pray"
						Spell[312].cast
					end
				end
				pause 0.25 if npc.status !~ /dead|gone/
			end
		elsif npc.status !~ /dead|gone/ && Char.name =~ /Evician/
			if Script.running?("combo")
				kill_script "combo" 
				sleep 0.1 while ( Script.running?("combo"))
			end
			sleep 0.5
			waitrt?
			Script.start("combo")
			sleep 0.1 while ( npc.status !~ /dead|gone/ )

		elsif !(npc.status =~ /dead|gone/)
			start_script "bigshot", [ "quick" ]
			wait_while {running?("bigshot")}
		end
		put "dismiss #{npc.noun}" if npc.status =~ /dead/
	}
end


def loot(scriprummage,scrippouch,waggle_me,pause_me)
	waitrt?
	fput "store all"
	sleep 1
	loop {
		fput "get package" if (checkleft != "package" && checkright != "package")
		sleep 1
		break if (checkleft == "package" || checkright == "package")
	} if (checkleft != "package" && checkright != "package")

	if UserVars.tdusk[:lootpackage]
		fput "open my package" 
		fput "look in my package"
		fput "open my #{Vars.lootsack}" if UserVars.tdusk[:open_lootsack]
		line = dothistimeout "empty my package into my #{Vars.lootsack}", 5, /but nothing will fit|but nothing comes out|leaving the rest|everything falls in quite nicely/
		if line =~ /everything falls in quite nicely|but nothing comes out/
			# emptied fine, yay!
		else
			echo "CONTAINER FULL, TIME TO EMPTY!"
			echo "CONTAINER FULL, TIME TO EMPTY!"
			echo "CONTAINER FULL, TIME TO EMPTY!"
			echo "or something bad happened, you should check the package!"
			exit
		end
		sleep 1
		waitrt?
	
		if checkright == "package" && (GameObj.right_hand.contents.empty? || GameObj.right_hand.contents.nil?)
			fput "drop my package"
		elsif checkleft == "package" && (GameObj.left_hand.contents.empty? || GameObj.left_hand.contents.nil?)
			fput "drop my package"
		else
			respond "package not empty"
			respond "package not empty"
			respond "package not empty"
			pause_script
		end
	else
		fput "put my package into my #{Vars.lootsack}"
		sleep 1
		if (checkleft == "package" || checkright == "package")
			echo "CONTAINER FULL, TIME TO EMPTY!"
			echo "CONTAINER FULL, TIME TO EMPTY!"
			echo "CONTAINER FULL, TIME TO EMPTY!"
			echo "or something bad happened, you should check the package!"
			exit
		end
	end

	start_script("go2", ["23780"]) 
	wait_while {running?("go2")}
	start_script("waggle") if waggle_me
	wait_while {running?("waggle")}	if waggle_me
	
	# Pause Script so you can socialize, clear mind, mule loot, etc.
	# ;u duskruin
	# to continue
	if pause_me
		echo "PAUSING SCRIPT"
		echo ";u tdusk"
		echo "TO CONTINUE"
		pause_script
	elsif Char.name =~ /Tysong/
		sleep(1) while percentencumbrance > 20
		sleep(1) until checkmana == maxmana
		#sleep(1) until Spell[9516].timeleft <= 10
	end
	
	sleep(1) until checkmana == maxmana if Char.name =~ /Tysong|Rasko|Nuadjha|Arkios/

	sleep 1
	fput "get my #{UserVars.tdusk[:token]} from my #{Vars.lootsack}"
	fput "go entrance" if !checkgrouped
	sleep(1) until Room.current.id == 24550
end

if variable[1].downcase =~ /(slip|token|jar|booklet|voucher)/
	UserVars.tdusk[:token] = $+

elsif variable[1].downcase == "help" || UserVars.tdusk[:token] == nil
	respond "\n
    SYNTAX - ;tdusk <SLIP/TOKEN/BOOKLET/JAR/VOUCHER>
    Start script outside of entrance with your weapons/shield out.
    Uses READY LIST set weapons/shield settings to store/ready between runs.
    Will remember SLIP/TOKEN/BOOKLET/JAR used after first time given.
	
    The Script has several variables that can be set to change behavior. See blow
	
    Waggle Between Runs - Default is set to TRUE (Current: #{UserVars.tdusk[:waggle_me]})
    ;e echo UserVars.tdusk[:waggle_me] = false
	
    Pauses Between Runs - Default is set to TRUE (Current: #{UserVars.tdusk[:pause_me]})
    ;e echo UserVars.tdusk[:pause_me] = false

    Auto-Enable Enhancives via INV ENHANCIVE ON/OFF - Default is set to FALSE (Current: #{UserVars.tdusk[:enhancive_me]})
    ;e echo UserVars.tdusk[:enhancive_me] = true
	
    Uses Duskruin Scrip pouch to rummage collection of scrip. Default is set to TRUE (Current: #{UserVars.tdusk[:scriprummage]})
    ;e echo UserVars.tdusk[:scriprummage] = false

    Set your scrip pouch description if different than \"bloodscrip pouch\". (Current: #{UserVars.tdusk[:scrippouch]})
    ;e echo UserVars.tdusk[:scrippouch] = \"whatever pouch\"
	
    Active Hunting Scripts (Default to stand & duskruin_watch)
    (Current: #{UserVars.tdusk[:activescripts]})
    ;e echo UserVars.tdusk[:activescripts] = ['stand','duskruin_watch','SCRIPT1HERE','SCRIPT2HERE','ETCETCETCETC']
	
    Custom Attack Script In External CHARNAME-duskattack.lic file - Default to FALSE (Current #{UserVars.tdusk[:attack_script]})
    ;e echo UserVars.tdusk[:attack_script] = true
    Sample available via ;repo download Tysong-duskattack

    SLIPS/TOKENS/JARS/BOOKLETS/VOUCHERS Should be in your lootsack. (Current: #{UserVars.lootsack})
    ;VARS SET lootsack=CONTAINERHERE

    Whether to loot the package or to store it. Default is set to TRUE. (Current: #{UserVars.tdusk[:lootpackage]})
    ;e echo UserVars.tdusk[:lootpackage] = false

    Whether to open your lootsack prior to emptying your package into it. Default is set to FALSE. (Current: #{UserVars.tdusk[:open_lootsack]})
    ;e echo UserVars.tdusk[:open_lootsack] = true

    Uses ;BIGSHOT QUICK for hunting logic. So make sure your bigshot is setup correctly.
        Hunting Tab  - quickhunt targets should be:  (?:.*)
        Commands Tab - quick hunting commands: fill this box with how you want it to attack
        Set everything else up with how you want it.

    Broadcasts time to DUSKRUIN lnet channel when done. Default is true. (Current: #{UserVars.tdusk[:broadcast]})
    ;e echo UserVars.tdusk[:broadcast] = false"
	exit	
end

before_dying { 
	UserVars.tdusk[:activescripts].each { |activescript|
		kill_script "#{activescript}"
	}
	fput "incant set evoke 903" if Char.name =~ /Tysong|Sabotage/
}

fput "incant set cast 903" if Char.name =~ /Tysong|Sabotage/

fput "store all"
pause 1
fput "get my #{UserVars.tdusk[:token]} from my #{Vars.lootsack}"
pause 1
fput "go entrance" if !checkgrouped
sleep(1) until Room.current.id == 24550

loop {
	line = get
	if line =~ /An announcer shouts\, \"Introducing (?:.*)"/
		fput "put my #{UserVars.tdusk[:token]} in my #{Vars.lootsack}" if UserVars.tdusk[:token] =~ /jar|booklet|voucher/
		fput "gird"
		UserVars.tdusk[:activescripts].each { |activescript|
			if Script.exists?("#{activescript}")
				Script.start("#{activescript}") if !(Script.running?("#{activescript}"))
				Script.unpause("#{activescript}") if Script.paused?("#{activescript}")
			end
		}
		_respond("#{fam_window_begin}DR-Starting Arena\r\n#{fam_window_end}")
		group_size = 3 if checkpcs.count == 2
		group_size = 2 if checkpcs.count == 1
		group_size = 1 if checkpcs.count == nil

		multifput "get my quartz orb", "rub my quartz orb", "stow my quartz orb" if Char.name =~ /Orpius/
		
		if Char.name =~ /Alasatia|Treeva|Tysong|Altheren|Sabotage|Aranthius/
			waitcastrt?
			Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active?
		end
		Spell[240].cast if Spell[240].affordable? && !Spell[240].active? && Char.name =~ /Siierra|Katiesa/
		waitcastrt? if Char.prof =~ /Wizard|Sorcerer|Bard/
		Spell[418].cast if Char.prof =~ /Wizard|Sorcerer/
		Spell[1018].cast if Char.prof =~ /Bard/
		waitcastrt? if Char.prof =~ /Wizard/
		fput "incant 909 evoke" if Spell[909].affordable? and Spell[909].timeleft < 112 and Char.prof =~ /Wizard/ and Char.name !~ /Tysong|Treeva|Sabotage|Aranthius/
		put "inventory enhancive on" if UserVars.tdusk[:enhancive_me]
		fput "beseech kunai ignite" if Char.name =~ /Nairdin/
		put "shout" if group_size == 1
		
	elsif line =~ /An announcer shouts\, \"(?:.*)\"  An iron portcullis is raised and .* (?:enter|enters) the arena\!/ || ((GameObj.npcs.count { |npc| ( npc.status !~ /dead|gone/) } >= 1) && Room.current.id == 24550 && UserVars.tdusk[:wave_number] != 0)
		(start_time = Time.now)	if (line =~ /An announcer shouts\, \"FIGHT\!\"  An iron portcullis is raised and .* (?:enter|enters) the arena\!/)		
		(kill_time  = total_time) if total_time
		total_time = Time.now - start_time
		total_time = total_time.round(2)
		if kill_time
			kill_time = total_time - kill_time
		else
			kill_time = total_time
		end
		(avg_reg = avg_reg + kill_time) if !(Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number])
		(avg_champ = avg_champ + kill_time) if Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]
		_respond("#{fam_window_begin}#{group_size}v#{group_size} DR-Kills: #{UserVars.tdusk[:wave_number]}, Total Time #{Time.at(total_time).strftime("%M:%S")}, Kill Time: #{Time.at(kill_time).strftime("%M:%S")}\r\n#{fam_window_end}")
		UserVars.tdusk[:wave_number] += 1
		attack(UserVars.tdusk[:wave_number])

	elsif line =~ /An announcer boasts\, \"(?:.*) defeating all those that opposed .* The overwhelming sound of applauding echoes throughout the stands\!/
		(kill_time  = total_time) if total_time
		total_time = Time.now - start_time
		total_time = total_time.round(2)
		if kill_time
			kill_time = total_time - kill_time
		else
			kill_time = total_time
		end
		(avg_reg = avg_reg + kill_time) if !(Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number])
		(avg_champ = avg_champ + kill_time) if Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]
		avg_reg = avg_reg / 20
		avg_champ = avg_champ / 5
		_respond("#{fam_window_begin}#{group_size}v#{group_size} DR-Kills: #{UserVars.tdusk[:wave_number]}, Total Time #{Time.at(total_time).strftime("%M:%S")}, Kill Time: #{Time.at(kill_time).strftime("%M:%S")}\r\n#{fam_window_end}")
		_respond("#{fam_window_begin}DR-Winning Time: #{Time.at(total_time).strftime("%M:%S")} \r\n#{fam_window_end}")
		_respond("#{fam_window_begin}DR-Avg Reg Kill: #{Time.at(avg_reg).strftime("%M:%S")}, Avg Champ Kill: #{Time.at(avg_champ).strftime("%M:%S")} \r\n#{fam_window_end}")
		send_to_script(lnet_or_0net,"chat on DUSKRUIN #{group_size}v#{group_size} Finished: #{Time.at(total_time).strftime("%M:%S")}, Avg Reg Kill: #{Time.at(avg_reg).strftime("%M:%S")}, Avg Champ Kill: #{Time.at(avg_champ).strftime("%M:%S")}") if UserVars.tdusk[:broadcast]

	elsif line =~ /An arena guard escorts you from the dueling sands/
		put "STOP 1018" if Char.prof =~ /Bard/
		put "inventory enhancive off" if UserVars.tdusk[:enhancive_me]
		UserVars.tdusk[:activescripts].each { |activescript|
			Script.pause("#{activescript}") if Script.running?("#{activescript}") && !Script.paused?("#{activescript}")
		}

	elsif line =~ /Here are your winnings, #{Char.name}./
		start_time = 0
		total_time = 0
		kill_time  = 0
		avg_reg    = 0
		avg_champ  = 0
		UserVars.tdusk[:wave_number] = 0
		loot(UserVars.tdusk[:scriprummage],UserVars.tdusk[:scrippouch],UserVars.tdusk[:waggle_me],UserVars.tdusk[:pause_me])
		
	# You've been defeated.  You'll be dragged out of the arena in a moment!  The wards around the arena protect your magic.
	# A gornar-shackled ogre drags you out of the arena.
	elsif line =~ /drags you out of the arena/ || dead?
		respond "dead!!!"
		fput "inventory enhancive off" if UserVars.tdusk[:enhancive_me]
		exit
	end
	
}
